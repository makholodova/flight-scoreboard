// <auto-generated />
using System;
using FlightScoreboard.DateBase;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FlightScoreboard.Migrations
{
    [DbContext(typeof(FlightScoreboardContext))]
    [Migration("20231025072428_ChangeGateAndTerminal")]
    partial class ChangeGateAndTerminal
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FlightScoreboard.DateBase.Airline", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.AirlineAirplane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<int>("AirplaneId")
                        .HasColumnType("int");

                    b.Property<int>("SerialNumber")
                        .HasMaxLength(50)
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.HasIndex("AirplaneId");

                    b.ToTable("AirlineAirplanes");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.Airplane", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Airplanes");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.Flight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("ActualArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ActualDepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("AirlineAirplaneId")
                        .HasColumnType("int");

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ArrivalTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BoardingEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("BoardingStartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckInEndTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("CheckInStartTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DepartureTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("FromCityId")
                        .HasColumnType("int");

                    b.Property<string>("FromGate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FromTerminal")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NumberOfFlight")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PilotId")
                        .HasColumnType("int");

                    b.Property<int>("ToCityId")
                        .HasColumnType("int");

                    b.Property<string>("ToGate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ToTerminal")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AirlineAirplaneId");

                    b.HasIndex("AirlineId");

                    b.HasIndex("FromCityId");

                    b.HasIndex("PilotId");

                    b.HasIndex("ToCityId");

                    b.ToTable("Flights");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.Pilot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasMaxLength(4)
                        .HasColumnType("int");

                    b.Property<int>("AirlineId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("SurName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("AirlineId");

                    b.ToTable("Pilots");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.AirlineAirplane", b =>
                {
                    b.HasOne("FlightScoreboard.DateBase.Airline", "Airline")
                        .WithMany("AirlineAirplanes")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightScoreboard.DateBase.Airplane", "Airplane")
                        .WithMany("AirlineAirplanes")
                        .HasForeignKey("AirplaneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("Airplane");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.Flight", b =>
                {
                    b.HasOne("FlightScoreboard.DateBase.AirlineAirplane", "AirlineAirplane")
                        .WithMany("Flights")
                        .HasForeignKey("AirlineAirplaneId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlightScoreboard.DateBase.Airline", "Airline")
                        .WithMany("Flights")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightScoreboard.DateBase.City", "FromCity")
                        .WithMany("FromFlights")
                        .HasForeignKey("FromCityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlightScoreboard.DateBase.Pilot", "Pilot")
                        .WithMany("Flights")
                        .HasForeignKey("PilotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("FlightScoreboard.DateBase.City", "ToCity")
                        .WithMany("ToFlights")
                        .HasForeignKey("ToCityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Airline");

                    b.Navigation("AirlineAirplane");

                    b.Navigation("FromCity");

                    b.Navigation("Pilot");

                    b.Navigation("ToCity");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.Pilot", b =>
                {
                    b.HasOne("FlightScoreboard.DateBase.Airline", "Airline")
                        .WithMany("Pilots")
                        .HasForeignKey("AirlineId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Airline");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.Airline", b =>
                {
                    b.Navigation("AirlineAirplanes");

                    b.Navigation("Flights");

                    b.Navigation("Pilots");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.AirlineAirplane", b =>
                {
                    b.Navigation("Flights");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.Airplane", b =>
                {
                    b.Navigation("AirlineAirplanes");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.City", b =>
                {
                    b.Navigation("FromFlights");

                    b.Navigation("ToFlights");
                });

            modelBuilder.Entity("FlightScoreboard.DateBase.Pilot", b =>
                {
                    b.Navigation("Flights");
                });
#pragma warning restore 612, 618
        }
    }
}
